package test;

import java.nio.channels.SelectionKey;
import java.nio.channels.Selector;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Optional;
import java.util.Set;

import org.apache.commons.collections4.list.UnmodifiableList;
import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.google.common.collect.ImmutableList;
import com.lfp.joe.beans.JodaBeans;

@BeanDefinition
public class SelectorProcessorErrorDetails implements ImmutableBean {

	@PropertyDefinition(validate = "notNull")
	private final Throwable error;

	@PropertyDefinition(get = "manual")
	private final List<Selector> selectors;

	@PropertyDefinition(get = "optional")
	private final SelectionKey key;

	public List<Selector> getSelectors() {
		if (selectors == null)
			return Collections.emptyList();
		if (selectors instanceof UnmodifiableList)
			return selectors;
		return Collections.unmodifiableList(selectors);
	}

	public static void main(String[] args) {
		JodaBeans.updateCode();
	}

	// ------------------------- AUTOGENERATED START -------------------------
	/// CLOVER:OFF
	/**
	 * The meta-bean for {@code SelectorProcessorErrorDetails}.
	 * 
	 * @return the meta-bean, not null
	 */
	public static SelectorProcessorErrorDetails.Meta meta() {
		return SelectorProcessorErrorDetails.Meta.INSTANCE;
	}

	static {
		JodaBeanUtils.registerMetaBean(SelectorProcessorErrorDetails.Meta.INSTANCE);
	}

	/**
	 * Returns a builder used to create an instance of the bean.
	 * 
	 * @return the builder, not null
	 */
	public static SelectorProcessorErrorDetails.Builder builder() {
		return new SelectorProcessorErrorDetails.Builder();
	}

	/**
	 * Restricted constructor.
	 * 
	 * @param builder the builder to copy from, not null
	 */
	protected SelectorProcessorErrorDetails(SelectorProcessorErrorDetails.Builder builder) {
		JodaBeanUtils.notNull(builder.error, "error");
		this.error = builder.error;
		this.selectors = (builder.selectors != null ? ImmutableList.copyOf(builder.selectors) : null);
		this.key = builder.key;
	}

	@Override
	public SelectorProcessorErrorDetails.Meta metaBean() {
		return SelectorProcessorErrorDetails.Meta.INSTANCE;
	}

	@Override
	public <R> Property<R> property(String propertyName) {
		return metaBean().<R>metaProperty(propertyName).createProperty(this);
	}

	@Override
	public Set<String> propertyNames() {
		return metaBean().metaPropertyMap().keySet();
	}

	// -----------------------------------------------------------------------
	/**
	 * Gets the error.
	 * 
	 * @return the value of the property, not null
	 */
	public Throwable getError() {
		return error;
	}

	// -----------------------------------------------------------------------
	/**
	 * Gets the key.
	 * 
	 * @return the optional value of the property, not null
	 */
	public Optional<SelectionKey> getKey() {
		return Optional.ofNullable(key);
	}

	// -----------------------------------------------------------------------
	/**
	 * Returns a builder that allows this bean to be mutated.
	 * 
	 * @return the mutable builder, not null
	 */
	public Builder toBuilder() {
		return new Builder(this);
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (obj != null && obj.getClass() == this.getClass()) {
			SelectorProcessorErrorDetails other = (SelectorProcessorErrorDetails) obj;
			return JodaBeanUtils.equal(error, other.error) && JodaBeanUtils.equal(selectors, other.selectors)
					&& JodaBeanUtils.equal(key, other.key);
		}
		return false;
	}

	@Override
	public int hashCode() {
		int hash = getClass().hashCode();
		hash = hash * 31 + JodaBeanUtils.hashCode(error);
		hash = hash * 31 + JodaBeanUtils.hashCode(selectors);
		hash = hash * 31 + JodaBeanUtils.hashCode(key);
		return hash;
	}

	@Override
	public String toString() {
		StringBuilder buf = new StringBuilder(128);
		buf.append("SelectorProcessorErrorDetails{");
		int len = buf.length();
		toString(buf);
		if (buf.length() > len) {
			buf.setLength(buf.length() - 2);
		}
		buf.append('}');
		return buf.toString();
	}

	protected void toString(StringBuilder buf) {
		buf.append("error").append('=').append(JodaBeanUtils.toString(error)).append(',').append(' ');
		buf.append("selectors").append('=').append(JodaBeanUtils.toString(selectors)).append(',').append(' ');
		buf.append("key").append('=').append(JodaBeanUtils.toString(key)).append(',').append(' ');
	}

	// -----------------------------------------------------------------------
	/**
	 * The meta-bean for {@code SelectorProcessorErrorDetails}.
	 */
	public static class Meta extends DirectMetaBean {
		/**
		 * The singleton instance of the meta-bean.
		 */
		static final Meta INSTANCE = new Meta();

		/**
		 * The meta-property for the {@code error} property.
		 */
		private final MetaProperty<Throwable> error = DirectMetaProperty.ofImmutable(this, "error",
				SelectorProcessorErrorDetails.class, Throwable.class);
		/**
		 * The meta-property for the {@code selectors} property.
		 */
		@SuppressWarnings({ "unchecked", "rawtypes" })
		private final MetaProperty<List<Selector>> selectors = DirectMetaProperty.ofImmutable(this, "selectors",
				SelectorProcessorErrorDetails.class, (Class) List.class);
		/**
		 * The meta-property for the {@code key} property.
		 */
		private final MetaProperty<SelectionKey> key = DirectMetaProperty.ofImmutable(this, "key",
				SelectorProcessorErrorDetails.class, SelectionKey.class);
		/**
		 * The meta-properties.
		 */
		private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(this, null, "error",
				"selectors", "key");

		/**
		 * Restricted constructor.
		 */
		protected Meta() {
		}

		@Override
		protected MetaProperty<?> metaPropertyGet(String propertyName) {
			switch (propertyName.hashCode()) {
			case 96784904: // error
				return error;
			case -1715959692: // selectors
				return selectors;
			case 106079: // key
				return key;
			}
			return super.metaPropertyGet(propertyName);
		}

		@Override
		public SelectorProcessorErrorDetails.Builder builder() {
			return new SelectorProcessorErrorDetails.Builder();
		}

		@Override
		public Class<? extends SelectorProcessorErrorDetails> beanType() {
			return SelectorProcessorErrorDetails.class;
		}

		@Override
		public Map<String, MetaProperty<?>> metaPropertyMap() {
			return metaPropertyMap$;
		}

		// -----------------------------------------------------------------------
		/**
		 * The meta-property for the {@code error} property.
		 * 
		 * @return the meta-property, not null
		 */
		public final MetaProperty<Throwable> error() {
			return error;
		}

		/**
		 * The meta-property for the {@code selectors} property.
		 * 
		 * @return the meta-property, not null
		 */
		public final MetaProperty<List<Selector>> selectors() {
			return selectors;
		}

		/**
		 * The meta-property for the {@code key} property.
		 * 
		 * @return the meta-property, not null
		 */
		public final MetaProperty<SelectionKey> key() {
			return key;
		}

		// -----------------------------------------------------------------------
		@Override
		protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
			switch (propertyName.hashCode()) {
			case 96784904: // error
				return ((SelectorProcessorErrorDetails) bean).getError();
			case -1715959692: // selectors
				return ((SelectorProcessorErrorDetails) bean).getSelectors();
			case 106079: // key
				return ((SelectorProcessorErrorDetails) bean).key;
			}
			return super.propertyGet(bean, propertyName, quiet);
		}

		@Override
		protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
			metaProperty(propertyName);
			if (quiet) {
				return;
			}
			throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
		}

	}

	// -----------------------------------------------------------------------
	/**
	 * The bean-builder for {@code SelectorProcessorErrorDetails}.
	 */
	public static class Builder extends DirectFieldsBeanBuilder<SelectorProcessorErrorDetails> {

		private Throwable error;
		private List<Selector> selectors;
		private SelectionKey key;

		/**
		 * Restricted constructor.
		 */
		protected Builder() {
		}

		/**
		 * Restricted copy constructor.
		 * 
		 * @param beanToCopy the bean to copy from, not null
		 */
		protected Builder(SelectorProcessorErrorDetails beanToCopy) {
			this.error = beanToCopy.getError();
			this.selectors = (beanToCopy.getSelectors() != null ? ImmutableList.copyOf(beanToCopy.getSelectors())
					: null);
			this.key = beanToCopy.key;
		}

		// -----------------------------------------------------------------------
		@Override
		public Object get(String propertyName) {
			switch (propertyName.hashCode()) {
			case 96784904: // error
				return error;
			case -1715959692: // selectors
				return selectors;
			case 106079: // key
				return key;
			default:
				throw new NoSuchElementException("Unknown property: " + propertyName);
			}
		}

		@SuppressWarnings("unchecked")
		@Override
		public Builder set(String propertyName, Object newValue) {
			switch (propertyName.hashCode()) {
			case 96784904: // error
				this.error = (Throwable) newValue;
				break;
			case -1715959692: // selectors
				this.selectors = (List<Selector>) newValue;
				break;
			case 106079: // key
				this.key = (SelectionKey) newValue;
				break;
			default:
				throw new NoSuchElementException("Unknown property: " + propertyName);
			}
			return this;
		}

		@Override
		public Builder set(MetaProperty<?> property, Object value) {
			super.set(property, value);
			return this;
		}

		/**
		 * @deprecated Use Joda-Convert in application code
		 */
		@Override
		@Deprecated
		public Builder setString(String propertyName, String value) {
			setString(meta().metaProperty(propertyName), value);
			return this;
		}

		/**
		 * @deprecated Use Joda-Convert in application code
		 */
		@Override
		@Deprecated
		public Builder setString(MetaProperty<?> property, String value) {
			super.setString(property, value);
			return this;
		}

		/**
		 * @deprecated Loop in application code
		 */
		@Override
		@Deprecated
		public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
			super.setAll(propertyValueMap);
			return this;
		}

		@Override
		public SelectorProcessorErrorDetails build() {
			return new SelectorProcessorErrorDetails(this);
		}

		// -----------------------------------------------------------------------
		/**
		 * Sets the error.
		 * 
		 * @param error the new value, not null
		 * @return this, for chaining, not null
		 */
		public Builder error(Throwable error) {
			JodaBeanUtils.notNull(error, "error");
			this.error = error;
			return this;
		}

		/**
		 * Sets the selectors.
		 * 
		 * @param selectors the new value
		 * @return this, for chaining, not null
		 */
		public Builder selectors(List<Selector> selectors) {
			this.selectors = selectors;
			return this;
		}

		/**
		 * Sets the {@code selectors} property in the builder from an array of objects.
		 * 
		 * @param selectors the new value
		 * @return this, for chaining, not null
		 */
		public Builder selectors(Selector... selectors) {
			return selectors(ImmutableList.copyOf(selectors));
		}

		/**
		 * Sets the key.
		 * 
		 * @param key the new value
		 * @return this, for chaining, not null
		 */
		public Builder key(SelectionKey key) {
			this.key = key;
			return this;
		}

		// -----------------------------------------------------------------------
		@Override
		public String toString() {
			StringBuilder buf = new StringBuilder(128);
			buf.append("SelectorProcessorErrorDetails.Builder{");
			int len = buf.length();
			toString(buf);
			if (buf.length() > len) {
				buf.setLength(buf.length() - 2);
			}
			buf.append('}');
			return buf.toString();
		}

		protected void toString(StringBuilder buf) {
			buf.append("error").append('=').append(JodaBeanUtils.toString(error)).append(',').append(' ');
			buf.append("selectors").append('=').append(JodaBeanUtils.toString(selectors)).append(',').append(' ');
			buf.append("key").append('=').append(JodaBeanUtils.toString(key)).append(',').append(' ');
		}

	}

	/// CLOVER:ON
	// -------------------------- AUTOGENERATED END --------------------------
}
